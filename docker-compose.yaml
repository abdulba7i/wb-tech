version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6380:6379" 
    # networks:
    #   - kafka-net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9020:8080"
    environment:
      AUTH_TYPE: DISABLED
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - kafka-net

  kafka-init:
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c", "kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --replication-factor 1 --partitions 1 --topic wb-tech-topic"]
    networks:
      - kafka-net

  # emulator-script:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   image: wb-tech:latest
  #   command: ["/bin/emulator-script"]
  #   depends_on:
  #     kafka-init:
  #       condition: service_completed_successfully
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - KAFKA_ADDRESS=kafka:29092
  #     - TOPIC=wb-tech-topic
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USER=postgres
  #     - DB_PASSWORD=postgres
  #     - DB_NAME=wb-tech
  #   networks:
  #     - kafka-net

  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: wb-tech:latest
    command: ["./api"]
    depends_on:
      - emulator-script
      - redis
      - kafka
      - postgres
    ports:
      - "8081:8081"
    environment:
      - KAFKA_ADDRESS=kafka:29092
      - TOPIC=wb-tech-topic
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=wb-tech
    networks:
      - kafka-net

  postgres:
    image: postgres:14.5-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - 5431:5432

networks:
  kafka-net:
    driver: bridge

volumes:
  pgdata: